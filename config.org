#+STARTUP: content

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

#+RESULTS:

* Interface
** Startup, general Emacs settings
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
     (setq inhibit-startup-message t
           custom-safe-themes t
           create-lockfiles nil
           confirm-kill-processes nil
           backup-by-copying t
           require-final-newline t
           delete-old-versions t)

     ;; Hide Scroll bar,menu bar, tool bar
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode -1)

     (global-auto-revert-mode)
     (save-place-mode)

     (setq-default indent-tabs-mode nil)
   #+END_SRC

   #+RESULTS:
   : t
** UTF-8 by Default
   #+begin_src emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (set-file-name-coding-system 'utf-8)
     (set-clipboard-coding-system 'utf-8)
     (set-w32-system-coding-system 'utf-8)
     (set-buffer-file-coding-system 'utf-8) 
   #+end_src

** Aesthetic
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore ; no bell
	   ;; better scrolling
	   scroll-step 1
	   scroll-conservatively 101
	   scroll-preserve-screen-position 1
	   mouse-wheel-scroll-amount '(1 ((shift) . 5))
	   mouse-wheel-follow-mouse t

	   truncate-lines t
	   frame-resize-pixelwise t)

     (global-hl-line-mode t)

   #+end_src

   #+RESULTS:
   : t

** Themes
   #+begin_src emacs-lisp
     (use-package dracula-theme)

     (use-package poet-theme
       :defer t)

     (use-package doom-themes
       :custom
       (doom-themes-enable-bold t)
       (doom-themes-enable-italic t)
       :config
       (doom-themes-visual-bell-config)
       (doom-themes-treemacs-config)
       (load-theme 'doom-dracula t))
   #+end_src

   #+RESULTS:

** Mode Line
   #+begin_src emacs-lisp
     (use-package doom-modeline
	    :config
	    (doom-modeline-mode))

     (use-package anzu
	    :after isearch
	    :config
	    (global-anzu-mode))
   #+end_src

** Window Dividers
   #+begin_src emacs-lisp :tangle early-init.el
     (setq window-divider-default-places t
	   window-divider-default-bottom-width 1
	   window-divider-default-right-width 1)

     (window-divider-mode)
   #+end_src

   #+RESULTS:
   : t

** All The Icons
   #+begin_src emacs-lisp
     (use-package all-the-icons)
   #+end_src

   #+RESULTS:

** Dashboard
   #+begin_src emacs-lisp
	  (use-package projectile
	    :config (projectile-mode +1))
	  (use-package dashboard
	    :custom
	    (dashboard-startup-banner 'logo)
	    (dashboard-set-heading-icons t)
	    (dashboard-set-file-icons t)
	    (dashboard-center-content t)
	    (dashboard-items '((recents  . 10)
			       (projects . 5)
			       (bookmarks . 5)))
	    :config
	    (dashboard-setup-startup-hook))
   #+end_src

   #+RESULTS:
   : t

** Tabs
   #+begin_src emacs-lisp
     (use-package centaur-tabs
       :hook
       (dashboard-mode . centaur-tabs-local-mode)
       (term-mode . centaur-tabs-local-mode)
       (calendar-mode . centaur-tabs-local-mode)
       (org-agenda-mode . centaur-tabs-local-mode)
       (helpful-mode . centaur-tabs-local-mode)
       :bind
       (:map evil-normal-state-map
             ("g t" . centaur-tabs-forward)
             ("g T" . centaur-tabs-backward))
       :custom
       (centaur-tabs-style "bar")
       (centaur-tabs-set-icons t)
       (centaur-tabs-set-modified-marker t)
       (centaur-tabs-height 32)
       (x-underline-at-descent-line t)
       (uniquify-separator "/")
       (uniquify-buffer-name-style 'forward)
       (centaur-tabs-gray-out-icons 'buffer)
       :config
       (centaur-tabs-headline-match)
       (centaur-tabs-enable-buffer-reordering)
       (centaur-tabs-mode t)
       (defun centaur-tabs-buffer-groups ()
         "`centaur-tabs-buffer-groups' control buffers' group rules.

      Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
      All buffer name start with * will group to \"Emacs\".
      Other buffer group by `centaur-tabs-get-group-name' with project name."
         (list
          (cond
           ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
           ;; "Remote")
           ((or (string-equal "*" (substring (buffer-name) 0 1))
                (memq major-mode '(magit-process-mode
                                   magit-status-mode
                                   magit-diff-mode
                                   magit-log-mode
                                   magit-file-mode
                                   magit-blob-mode
                                   magit-blame-mode)))
            "Emacs")
           ((derived-mode-p 'prog-mode)
            "Editing")
           ((derived-mode-p 'dired-mode)
            "Dired")
           ((memq major-mode '(helpful-mode
                               help-mode))
            "Help")
           ((memq major-mode '(org-mode
                               org-agenda-clockreport-mode
                               org-src-mode
                               org-agenda-mode
                               org-beamer-mode
                               org-indent-mode
                               org-bullets-mode
                               org-cdlatex-mode
                               org-agenda-log-mode
                               diary-mode))
            "OrgMode")
           (t
            (centaur-tabs-get-group-name (current-buffer)))))))
   #+end_src

* Packages
** No Littering
   #+begin_src emacs-lisp
     (use-package no-littering
       :config
       (setq
	 auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
	 custom-file (no-littering-expand-etc-file-name "custom.el"))
       (when (file-exists-p custom-file)
	 (load custom-file)))
   #+end_src

** Which-key

   #+begin_src emacs-lisp
     (use-package which-key
       :after evil
       :custom
       (which-key-idle-delay 0.3)
       (which-key-allow-evil-operators t)
       :config
       (which-key-mode)
       (which-key-setup-minibuffer)
       (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold))

   #+end_src

** Evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :init
       (setq evil-want-integration t
	     evil-want-keybinding nil
	     evil-want-C-u-scroll t
	     evil-want-Y-yank-to-eol t
	     evil-split-window-below t
	     evil-vsplit-window-right t)
       :config
       (evil-mode 1))
     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))
     (use-package evil-commentary
       :config
       (evil-commentary-mode))
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1))
     (use-package evil-org
       :after org
       :hook (org-mode . evil-org-mode)
       :config
       (add-hook 'evil-org-mode-hook
		 (lambda ()
		   (evil-org-set-key-theme)))
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
     (use-package evil-magit)
   #+END_SRC

** Helpful
   Better Emacs =*help*= buffer.

   #+begin_src emacs-lisp
     (use-package helpful
       :bind
       (([remap describe-function] . helpful-callable)
	([remap describe-variable] . helpful-variable)
	([remap descrivbe-key] . helpful-key)
	:map emacs-lisp-mode-map
	("C-c C-d" . helpful-at-point)))
   #+end_src

** Info-colors
   Pretty Info colors
   #+begin_src emacs-lisp
     (use-package info-colors
       :config
       (add-hook 'Info-selection-hook 'info-colors-fontify-node))
   #+end_src

** Counsel, Ivy
   #+begin_src emacs-lisp
     (use-package ivy
       :custom
       (ivy-use-virtual-buffers t)
       (ivy-re-builders-alist '((t . ivy--regex-plus)))
       :config
       (ivy-mode 1))
     (use-package counsel
       :config
       (counsel-mode 1))
     (use-package flx)
     (use-package prescient
       :config
       (prescient-persist-mode))
     (use-package ivy-prescient
       :after (ivy prescient)
       :config
       (ivy-prescient-mode))
   #+end_src

** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :init
       (global-flycheck-mode t))
     (use-package flycheck-posframe
       :after flycheck
       :hook (flycheck-mode . flycheck-posframe-mode)
       :config
       (flycheck-posframe-configure-pretty-defaults))
   #+end_src

** Format All
   #+begin_src emacs-lisp
     (use-package format-all)
   #+end_src

** Company
   #+begin_src emacs-lisp
     (use-package company
       :config
       (global-company-mode))
   #+end_src
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
     (use-package magit-todos
       :after magit
       :config
       (magit-todos-mode))
   #+END_SRC
** Git Gutter
   #+begin_src emacs-lisp
     (use-package git-gutter
       :custom
       (git-gutter:hide-gutter t)
       :config
       (global-git-gutter-mode +1))
   #+end_src
** Treemacs
   #+begin_src emacs-lisp
     (use-package treemacs)
     (use-package treemacs-evil
       :after treemacs evil)
     (use-package treemacs-projectile
       :after treemacs projectile)
     (use-package treemacs-icons-dired
       :after treemacs dired
       :config (treemacs-icons-dired-mode))
     (use-package treemacs-magit
       :after treemacs-magit)
   #+end_src

* Text Editing
** Better Defaults
   #+begin_src emacs-lisp
     (delete-selection-mode)
     (electric-pair-mode)
     (setq fill-column 80
	   sentence-end-double-space nil)

   #+end_src

** Cleanup Trailing Whitespace
   #+begin_src emacs-lisp
     (use-package whitespace-cleanup-mode
       :custom
       (show-trailing-whitespace t)
       :config
       (global-whitespace-cleanup-mode))
   #+end_src

** Paren
   #+begin_src emacs-lisp
     (use-package paren
       :straight (:type built-in)
       :custom
       (show-paren-when-point-inside-paren t)
       :config
       (show-paren-mode))
   #+end_src

** Rainbow Delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook (progn-mode . rainbow-delimiters-mode))
   #+end_src

** Parinfer
   #+begin_src emacs-lisp
     (use-package parinfer
       :hook ((emacs-lisp-mode . parinfer-mode)
	      (lisp-mode . parinfer-mode)
	      (clojure-mode . parinfer-mode))
       :init
       (setq parinfer-extensions '(defaults pretty-parens evil)))
   #+end_src
* Org Mode
** Aesthetics
   #+begin_src emacs-lisp
     (use-package org-superstar
	:hook (org-mode . org-superstar-mode))
   #+end_src

** Settings
   #+begin_src emacs-lisp
     (use-package org
       :custom
       (org-src-tab-acts-natively t)
       ;;(org-edit-src-content-indentation t)
       (org-src-window-setup 'current-window)
       (org-catch-invisible-edits 'show-and-error)
       (org-confirm-babel-evaluate nil)
       (org-hide-emphasis-markers t)
       (org-ellipsis "↴")
       :config
       (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
       (add-to-list 'org-structure-template-alist '("ss" . "src sh")))
   #+end_src

