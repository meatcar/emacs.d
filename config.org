#+STARTUP: content
#+PROPERTY: header-args :results silent

* The Bestest Emacs

Inspired by Spacemacs and Doom Emacs. Most of the "aesthetic" parts of those distributions are available as plugins, so gluing together your own configuration isn't too hard.

Featuring:

- [[https://github.com/raxod502/straight.el][straight.el]] for package management
- maximal [[https://github.com/jwiegley/use-package][use-package]] for package configuration
- maximal [[https://github.com/emacs-evil/evil][EVIL]] for vim comfort

* Goals

** Multi-platform
Be multi-platform, as I jump between Linux, Windows, and WSL

** Consistency and Modernity
Be as idiomatic as possible. Parts of this config have been copied and pasted from other places, but are rewritten/updated if needed to stay consistent and easy to read.

Every feature provided by ~use-package~ is used over calling elisp functions. That means ~:custom~ is preferred over ~setq~, ~:hook~ over ~add-hook~, etc. where possible.

** Minimal Customization, Maximal Reuse
Minimal customization of packages we use, unless they misbehave. Try to document and rationalize any setting set thats not part of the package's setup instructions.

Try to avoid "Not Invented Here" syndrome, use an existing package to do something instead of rolling our own.

* Startup, general Emacs settings
** Lexical Binding
Make elisp in this file behave like we expect these days. Everyone has this set, but no one explains why.

In non-elisp speak, it adds proper scoping and "closure" behaviour to variables.[[https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding][This Emacswiki article explains it well.]]

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** Constants
#+begin_src emacs-lisp
(setq *is-windows* (eq system-type 'windows-nt)
      ,*is-unix* (not *is-windows*)
      ,*mono-font-family* (if *is-windows* "GoMono NF" "Go Mono")
      ,*mono-font-height* 90
      ,*serif-font-family* (if *is-windows* "Georgia" "IBM Plex Serif")
      ,*serif-font-height* (if *is-windows* 110 100))
#+end_src

** General settings
Essentially what [[https://github.com/tpope/vim-sensible][vim-sensible]] does.

#+BEGIN_SRC emacs-lisp
;; don't expect "yes" or "no" in prompts, "y" or "n" is enough.
(defalias 'yes-or-no-p 'y-or-n-p)
(setq inhibit-startup-message t
      custom-safe-themes t ; all themes we install are safe
      create-lockfiles nil
      confirm-kill-processes nil
      backup-by-copying t
      require-final-newline t
      delete-old-versions t
      enable-local-variables :safe)

;; Hide Scroll bar,menu bar, tool bar
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

;; auto-revert files if emacs crashed
(global-auto-revert-mode 1)

;; save where you were when you last edited some file
(save-place-mode 1)

;; save window layout & buffers
(setq desktop-restore-eager 5)
(desktop-save-mode 1)

;; let's not use tabs for indenting by default
(setq-default indent-tabs-mode nil)
#+END_SRC

** UTF-8 by Default
Emacs is very conservative about assuming encoding. Everything is utf-8 these days, lets have that as the default.
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(if *is-windows*
  (set-w32-system-coding-system 'utf-8))
(set-buffer-file-coding-system 'utf-8)
#+end_src

* Packages

** No Littering
[[https://github.com/emacscollective/no-littering][no-littering]] teaches Emacs to not leave it's files everywhere, and just keep them neatly in =.emacs.d= where they don't bother anyone.

We also set ~custom-file~ to be within one of these new nice directories, so Emacs doesn't keep chaging =init.el= and messing with our git workflow.
#+begin_src emacs-lisp
(use-package no-littering
  :config
  (setq
   auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file)))
#+end_src

** Which-key
[[https://github.com/justbur/emacs-which-key][which-key]] pops up a nice window whenever we hesitate about a keyboard shortcut, and shows all the possible keys we can press. Popularized by Spacemacs and Doom-Emacs, we can now configure absurd key combinations, forget about them, and then be delighted to discover them again!

#+begin_src emacs-lisp
(use-package which-key
  :after evil
  :custom
  (which-key-allow-evil-operators t)
  (which-key-show-remaining-keys t)
  (which-key-sort-order 'which-key-prefix-then-key-order)
  :config
  (which-key-mode 1)
  (which-key-setup-side-window-bottom)
  (set-face-attribute
    'which-key-local-map-description-face nil :weight 'bold))
#+end_src

** Evil
[[https://github.com/emacs-evil/evil][EVIL]] is vim emulation in Emacs. There are a number of other evil packages which add vim-like bindings to various modes.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-Y-yank-to-eol t
        evil-split-window-below t
        evil-vsplit-window-right t
        evil-respect-visual-line-mode t)
  :config
  (evil-mode 1))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
(use-package evil-commentary
  :config
  (evil-commentary-mode 1))
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            #'(lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
(use-package evil-magit)
#+END_SRC

** General.el
[[https://github.com/noctuid/general.el][general.el]] is a wrapper around Emacs key-binding mechanisms to make them easier to use. It integrates with use-package, evil, and which-key.

We will define two "leader maps", similar to vim's =<leader>= and =<localleader>= that we will use to bind global and major-mode-specific keybindings. This is how we're kind of like

#+begin_src emacs-lisp
(use-package general
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer leader-def
    :states '(normal motion emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "C-SPC")
  (leader-def "" '(:ignore t :wk "leader"))
  (general-create-definer localleader-def
    :states '(normal motion emacs)
    :keymaps 'override
    :prefix "SPC m"
    :non-normal-prefix "C-SPC m")
  (localleader-def "" '(:ignore t :wk "mode")))
#+end_src

** Helpful
[[https://github.com/Wilfred/helpful][helpful]] makes a better Emacs =*help*= buffer, with colors and contextual information.

#+begin_src emacs-lisp
(use-package helpful
  :general
  (leader-def
    "h" '(:ignore t :wk "help")
    "hf" 'helpful-callable
    "hv" 'helpful-variable
    "hk" 'helpful-key
    "ho" 'helpful-at-point))
#+end_src

** Info-colors
[[https://github.com/ubolonton/info-colors][info-colors]] adds pretty Info colors.

#+begin_src emacs-lisp
(use-package info-colors
  :config
  (add-hook 'Info-selection-hook 'info-colors-fontify-node))
#+end_src

** Restart-emacs
[[https://github.com/iqbalansari/restart-emacs][restart-emacs]] teaches Emacs to restart itself. I added a ~my/reload-init~ command as well to just reload the =init.el= file without a full restart.

#+begin_src emacs-lisp
(defun my/reload-init ()
  "Reload init.el."
  (interactive)
  (message "Reloading init.el...")
  (load user-init-file nil 'nomessage)
  (message "Reloading init.el... done."))

(use-package restart-emacs
  :general
  (leader-def
    "q" '(:ignore t :wk "exit emacs")
    "qR" 'restart-emacs
    "qr" 'my/reload-init))
#+end_src

** Prescient
[[https://github.com/raxod502/prescient.el][prescient.el]] teaches =ivy= and =company= better sorting and filtering.

#+begin_src emacs-lisp
(use-package prescient
  :config
  (prescient-persist-mode 1))
#+end_src

** Counsel, Ivy
[[https://github.com/abo-abo/swiper][swiper/ivy/counsel]] is a great UI to visualize and filter lists. It sets itself up to augment most prompts to filter possible matches as you type. It's good stuff.

#+begin_src emacs-lisp
(use-package ivy
  :custom
  ;; add bookmarks and recentf to buffer lists
  (ivy-use-virtual-buffers t)
  ;; better matching method
  (ivy-re-builders-alist '((t . ivy--regex-plus)))
  :config
  (ivy-mode 1))
(use-package counsel
  :general
  (leader-def
    "SPC" '(counsel-M-x :wk "M-x")
    "f" '(:ignore t :wk "file")
    "ff" 'counsel-find-file
    "fr" 'counsel-buffer-or-recentf
    "b" '(:ignore t :wk "buffer")
    "bb" 'switch-to-buffer
    "bd" 'kill-this-buffer
    "bn" 'next-buffer
    "bp" 'previous-buffer
    "tc" 'counsel-load-theme)
  (:states 'normal
           "C-p"  'projectile-find-file
           "C-S-p"  'counsel-M-x)
  :config
  (counsel-mode 1))
;; better fuzzy matching.
(use-package flx)
(use-package ivy-prescient
  :after ivy prescient
  :config
  (ivy-prescient-mode 1))
;; add more information to ivy/counsel
(use-package ivy-rich
  :after ivy all-the-icons-ivy-rich
  :config
  (ivy-rich-mode 1)
  (setq ivy-initial-inputs-alist nil))
#+end_src

** Flycheck
[[https://github.com/flycheck/flycheck][flycheck]] gathers syntax errors and warnings on-the-fly. We use [[https://github.com/alexmurray/flycheck-posframe][flycheck-posframe]] to show them if the cursor is on a flycheck warning.

#+begin_src emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode t))
(use-package flycheck-posframe
  :after flycheck
  :hook (flycheck-mode . flycheck-posframe-mode)
  :config
  (flycheck-posframe-configure-pretty-defaults)
  (add-hook 'flycheck-posframe-inhibit-functions #'company--active-p)
  (add-hook 'flycheck-posframe-inhibit-functions #'evil-insert-state-p)
  (add-hook 'flycheck-posframe-inhibit-functions #'evil-replace-state-p)
  (advice-add 'org-edit-src-exit :after #'flycheck-posframe-hide-posframe))
#+end_src

** Format All
[[https://github.com/lassik/emacs-format-all-the-code][emacs-format-all-the-code]] knows about all the different formatters for different languuages, and tries to run them if they are installed. We configure it to format all modes that are in the ~auto-format-modes~ list on save. We well add modes to this later.

#+begin_src emacs-lisp
(defcustom auto-format-modes '()
  "Modes to turn on format-all-mode in")
(defcustom auto-format-dirs '()
  "Directories to turn on format-all-mode in")

(require 'cl-lib)
(defun my/auto-format-buffer-p ()
  (and
   (member major-mode auto-format-modes)
   (buffer-file-name)
   (save-match-data
     (let ((dir (file-name-directory (buffer-file-name))))
       (cl-some (lambda (regexp) (string-match regexp dir))
                auto-format-dirs)))))

(defun my/maybe-format-all-mode ()
  (format-all-mode (if (my/auto-format-buffer-p) 1 0)))

(use-package format-all
  :hook (after-change-major-mode . my/maybe-format-all-mode))
#+end_src

** Company
[[http://company-mode.github.io/][company-mode]] gives us the standard dropdown as-you-type of modern IDEs.

#+begin_src emacs-lisp
(use-package company
  :config
  (global-company-mode 1))
(use-package company-prescient
  :after company prescient
  :config
  (company-prescient-mode 1))
(use-package company-posframe
  :config
  (company-posframe-mode 1))
#+end_src

** Magit
[[https://github.com/magit/magit][magit]] is a magic UI for dealing with git. The keybinds are intuitive, and it pops up suggestion a-la =which-key= if you aren't sure what button to  press next.

#+begin_src emacs-lisp
(use-package magit
  :general
  (leader-def
    "g"  '(:ignore t :wk "git")
    "gs" '(magit :wk "git status")
    "gg" '(magit :wk "git status")))
#+end_src

We pair it with [[https://github.com/alphapapa/magit-todos][magit-todos]] which shows any =TODO=, =FIXME=, =XXX=, =BUG=, etc. comments in the codebase.

#+begin_src emacs-lisp
(use-package magit-todos
  :after magit
  :custom
  (magit-todos-nice nil)
  :config
  (magit-todos-mode 1))
#+end_src

[[https://github.com/dandavison/magit-delta][magit-delta]] improves the coloring of diffs in magit using [[https://github.com/dandavison/delta][delta]].

#+begin_src emacs-lisp
(use-package magit-delta
  :if *is-unix*
  :custom
  (magit-delta-default-dark-theme "Dracula")
  :config
  (magit-delta-mode 1))
#+end_src

** Projectile
[[https://github.com/bbatsov/projectile][projectile]] teaches Emacs to be aware of different ways a "project" folder can be recognized, and enables easy jumping and using of multiple projects in the same instance of emacs.

#+begin_src emacs-lisp
(defun my/expand-git-project-dirs (root)
  "Return a list of all project directories 2 levels deep in ROOT.

Given my git projects directory ROOT, with a layout like =git/{hub,lab}/<user>/project=, return a list of 'user' directories that are part of the ROOT."
  (mapcan #'(lambda (d) (cddr (directory-files d t)))
          (cddr (directory-files root t))))

(use-package projectile
  :general
  (leader-def
    "fp" 'projectile-find-file-dwim
    "p" '(:ignore t :wk "project")
    "pp" 'projectile-switch-project
    "pf" 'projectile-find-file
    "pd" 'projectile-dired
    "p/" 'projectile-ripgrep)
  :custom
  (projectile-completion-system 'default)
  (projectile-enable-caching t)
  (projectile-project-search-path
   (my/expand-git-project-dirs "~/git"))
  (projectile-sort-order 'recently-active)
  (projectile-indexing-method (if *is-unix* 'hybrid 'native))
  :config
  (projectile-mode +1)
  (projectile-discover-projects-in-search-path))
#+end_src

** Git Gutter
[[https://github.com/dgutov/diff-hl][diff-hl]] shows uncommitted git changes on left side of the buffer.

#+begin_src emacs-lisp
(use-package diff-hl
  :hook
  (dired-mode . diff-hl-dired-mode-unless-remote)
  :config
  (global-diff-hl-mode 1))
#+end_src

** Treemacs
[[https://github.com/Alexander-Miller/treemacs][treemacs]] is a sidebar tree file explorer of the current directory/project.
=evil=, =projectile=, and =magit= integration is enabled.

#+begin_src emacs-lisp
(use-package treemacs
  :general
  (leader-def
    "tt" 'treemacs
    "tf" 'treemacs-find-file))
(use-package treemacs-evil
  :after treemacs evil)
(use-package treemacs-projectile
  :after treemacs projectile)
(use-package treemacs-magit
  :after treemacs-magit)
#+end_src

* Interface
A good-looking tool is a pleasure to work with. Here, we try to tweak all the dials Emacs gives us to make it pretty and =A E S T H E T I C=.

** Aesthetics
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore ; no bell
      ;; better scrolling
      scroll-step 1
      scroll-conservatively 101
      scroll-preserve-screen-position 1
      mouse-wheel-scroll-amount '(1 ((shift) . 5))
      mouse-wheel-follow-mouse t
      ;; lines between the cursor and the edge of the screen
      scroll-margin 3

      ;; wrap lines that are too long.
      truncate-lines nil
      ;; don't resize frames a character at a time, but use pixels
      frame-resize-pixelwise t)

;; add some space between lines for easier reading.
(setq-default line-spacing 1)

;; highlight the current line
(global-hl-line-mode t)

;; Add padding inside buffer windows
(setq-default left-margin-width 2
              right-margin-width 2)
(set-window-buffer nil (current-buffer)) ; Use them now.

;; Add padding inside frames (windows)
(add-to-list 'default-frame-alist '(internal-border-width . 8))
(set-frame-parameter nil 'internal-border-width 8) ; Use them now
#+end_src

** Fonts
The [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]] package helps Emacs use the full range of unicode characters provided by most fonts.

We set a regular font and a ~variable-pitch~ one, the latter is used by ~mixed-pitch-mode~ to render regular text with a proportional font.

#+begin_src emacs-lisp
(use-package persistent-soft)
(use-package unicode-fonts
  :after persistent-soft
  :config
  (custom-set-faces
   `(default ((t (:family ,*mono-font-family*
                  :height ,*mono-font-height*))))
   `(variable-pitch ((t (:family ,*serif-font-family*
                         :height ,*serif-font-height*))))))
#+end_src

** Fast Scroll
Always redraw immediately when scrolling, more responsive and doesn't hang! Sourced from http://emacs.stackexchange.com/a/31427/2418

#+begin_src emacs-lisp
(setq fast-but-imprecise-scrolling t
      jit-lock-defer-time 0)
#+end_src

[[https://github.com/ahungry/fast-scroll][fast-scroll]] "works by temporarily disabling font-lock and switching to a barebones mode-line, until you stop scrolling (at which point it re-enables)". It only does this when scrolling super fast, to keep everything responsive.

#+begin_src emacs-lisp
(use-package fast-scroll
  :hook
  (fast-scroll-start . (lambda () (flycheck-mode -1)))
  (fast-scroll-end . (lambda () (flycheck-mode 1)))
  :config
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+end_src

** Themes
We will load all the themes. We need to ~:defer~ them, to prevent each theme getting loaded upon init, and flashing emacs and conflicting with each other.

#+begin_src emacs-lisp
(use-package base16-theme
  :defer t)

(use-package leuven-theme
  :defer t)

(use-package vivid-theme
  :straight (:host github :repo "websymphony/vivid-theme")
  :defer t)

(use-package dracula-theme
  :defer t)

(add-hook 'after-init-hook
          #'(lambda () (load-theme 'dracula t)))
#+end_src

** Mode Line
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] provides a clean and simple modeline (bottom bar) for each buffer. We pair it with the [[https://github.com/tarsius/minions][minions]] minor mode to collect all minor modes into a single menu. [[https://github.com/emacsorphanage/anzu][anzu]] is used to show the number of matches when we search in a file.

#+begin_src emacs-lisp
(use-package anzu
  :after isearch
  :config
  (global-anzu-mode 1))

(use-package minions
  :config
  (minions-mode 1))

(use-package doom-modeline
  :custom
  (inhibit-compacting-font-caches t)
  ;; make the modeline only as tall as the font, please.
  (doom-modeline-height 1)
  ;; 1 minor mode will be shown thanks to minions
  (doom-modeline-minor-modes t)
  :config
  (doom-modeline-mode 1))
#+end_src

** All The Icons
[[https://github.com/domtronn/all-the-icons.el/][all-the-icons]] allows emacs to show pretty icons anywhere we want.

We pair it with [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] to show them in =dired=, [[https://github.com/Alexander-Miller/treemacs/blob/master/src/extra/treemacs-all-the-icons.el][treemacs-all-the-icons]] to show them in =treemacs=, [[https://github.com/asok/all-the-icons-ivy][all-the-icons-ivy]] to show them in =ivy=, and [[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]] to show them in =ivy-rich=.

#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
(use-package treemacs-all-the-icons
  :after treemacs
  :config
  (treemacs-load-theme "all-the-icons"))
(use-package all-the-icons-ivy
  :config
  (all-the-icons-ivy-setup))
(use-package all-the-icons-ivy-rich
  :config
  (all-the-icons-ivy-rich-mode 1))
#+end_src

** Dashboard
[[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] adds a nice startup screen, showing recent files, projectes, etc.

#+begin_src emacs-lisp
(use-package dashboard
  :after all-the-icons projectile
  :custom
  ;; show in `emacsclient -c`
  (initial-buffer-choice #'(lambda () (get-buffer "*dashboard*")))
  (dashboard-startup-banner 'logo)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-items '((recents  . 10)
                     (projects . 5)
                     (bookmarks . 5)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Tabs
[[https://github.com/ema2159/centaur-tabs][centaur-tabs]] add tabs to the top of the window for emacs. It might sound crazy, but they are useful to keep an eye on which buffers you have open, especially when you jump between projects.

Out of the box they come configured ok, but not perfect. We configure the tabs to group by project, and hide/show them for more buffers.

#+begin_src emacs-lisp
(use-package centaur-tabs
  :after all-the-icons
  :general
  (:states 'normal
           "gt"  'centaur-tabs-forward
           "gT"  'centaur-tabs-backward)
  (leader-def
    "tg" 'centaur-tabs-toggle-groups)
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (helpful-mode . centaur-tabs-local-mode)
  :custom
  (centaur-tabs-style "bar")
  (centaur-tabs-set-icons t)
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-height 28)
  (x-underline-at-descent-line t)
  (uniquify-separator "/")
  (uniquify-buffer-name-style 'forward)
  (centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-modified-marker "")
  :config
  (centaur-tabs-headline-match)
  (centaur-tabs-enable-buffer-reordering)
  (centaur-tabs-mode t)
  (centaur-tabs-change-fonts *mono-font-family* *mono-font-height*)


  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

 Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
 All buffer name start with * will group to \"Emacs\".
 Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; "Remote")
      ((or (string-equal "*" (substring (buffer-name) 0 1))
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode)))
       "Emacs")
      ((derived-mode-p 'dired-mode)
       "Dired")
      ((memq major-mode '(helpful-mode
                          help-mode))
       "Help")
      ((memq major-mode '(org-agenda-clockreport-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-src-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       "OrgMode")
      (t
       (or (concat "Project: " (projectile-project-name))
           (centaur-tabs-get-group-name (current-buffer))))))))
#+end_src

** Wrap Long Lines
[[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] wraps lines at ~fill-column~, and makes it easier to read long lines of code. It is preferred over the built-in ~visual-line-mode~ because it doesn't break words.

#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook (org-src . visual-fill-column-mode)
  :custom
  (visual-line-fringe-indicators
   '(left-curly-arrow right-curly-arrow))
  (split-window-preferred-function
   'visual-fill-column-split-window-sensibly)
  :config
  (advice-add 'text-scale-adjust
              :after #'visual-fill-column-adjust)
  (global-visual-fill-column-mode 1)
  (global-visual-line-mode 1))
#+end_src

** Mixed Pitch Mode
[[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] allows us to use proportional fonts to display text that isn't code, and make files more readable.

#+begin_src emacs-lisp
(use-package mixed-pitch
  :after all-the-icons
  :custom
  (mixed-pitch-set-height t)
  :hook (text-mode . mixed-pitch-mode))
#+end_src

* Text Editing

** Better Defaults
#+begin_src emacs-lisp
(setq fill-column 80
      sentence-end-double-space nil)
#+end_src

** Editorconfig
[[https://github.com/editorconfig/editorconfig-emacs][editorconfig]] looks for an =.editorconfig= file, and sets indents and other coding conventions as instructed.

#+begin_src emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+end_src

** Cleanup Trailing Whitespace

#+begin_src emacs-lisp
(use-package whitespace-cleanup-mode
  :custom
  (show-trailing-whitespace t)
  :config
  (global-whitespace-cleanup-mode 1))
#+end_src

** Paren
#+begin_src emacs-lisp
(use-package paren
  :straight (:type built-in)
  :custom
  (show-paren-when-point-inside-paren t)
  :config
  (show-paren-mode 1))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (progn-mode . rainbow-delimiters-mode)
  :config
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground "red"
                      :inherit 'error
                      :box t))
#+end_src

** Parinfer
#+begin_src emacs-lisp
(use-package parinfer
  :if *is-windows*
  :hook
  (emacs-lisp-mode . parinfer-mode)
  (lisp-mode . parinfer-mode)
  (clojure-mode . parinfer-mode)
  :init
  (setq parinfer-extensions '(defaults pretty-parens evil)))
(use-package parinfer-rust-mode
  :if *is-unix*
  :hook
  emacs-lisp-mode
  lisp-mode
  clojure-mode
  :custom
  (parinfer-rust-auto-download t))
#+end_src

* Org Mode

** org
#+begin_src emacs-lisp
(use-package org
  :after org-superstar
  :general
  (leader-def
    "o" '(:ignore t :wk "org")
    "oa" 'org-agenda)
  (localleader-def
    :keymaps 'org-mode-map
    :major-modes t
    "," '(org-insert-structure-template :wk "insert block")
    "e" '(:ignore t :wk "execute")
    "ee" '(org-babel-execute-maybe :wk "execute (dwim)")
    "es" '(org-babel-execute-src-block :wk "execute block")
    "eb" '(org-babel-execute-buffer :wk "execute buffer")
    "et" '(org-babel-execute-subtree :wk "execute subtree")
    "'"  '(org-edit-special :wk "edit block")
    "tt" 'counsel-org-tag
    "tv" 'org-change-tag-in-region)
  (:keymaps 'org-src-mode
            :definer 'minor-mode
            :states 'normal
            "RET"  '(org-edit-src-exit :wk "save")
            "q"  '(org-edit-src-abort :wk "abort"))
  :custom
  (org-directory "~/Sync/org")
  (org-src-fontify-natively t)
  (org-src-window-setup 'other-window)
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-startup-truncated nil)
  (org-catch-invisible-edits 'show-and-error)
  (org-confirm-babel-evaluate nil)
  (org-hide-emphasis-markers nil)
  (org-pretty-entities t)
  (org-fontify-quote-and-verse-blocks t)
  (org-cycle-separator-lines -1)
  (org-ellipsis " ▿")
  (org-tag-column 0)
  :hook (org-mode . org-indent-mode)
  :config
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("ss" . "src sh")))
#+end_src

** org-superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :after all-the-icons
  :custom
  (inhibit-compacting-font-caches t)

  (org-superstar-headline-bullets-list '("⌾" "◈" "⚬" "▷"))

  (org-hide-leading-stars nil)
  (org-superstar-leading-bullet ?\s)

  (org-superstar-special-todo-items t)

  (org-superstar-prettify-item-bullets t)
  :hook
  (org-mode . me/auto-lightweight-mode)
  :config
  (defun me/auto-lightweight-mode ()
    "Start Org Superstar differently depending on the number of lists items."
    (let ((list-items
           (count-matches "^[ \t]*?\\([+-*]\\|[ \t]\\*\\)"
                          (point-min) (point-max))))
      (unless (< list-items 100))
      (org-superstar-toggle-lightweight-lists))
    (org-superstar-mode 1)))
#+end_src

** org-clock
Track time spent on tasks in org-mode.
#+begin_src emacs-lisp
(use-feature org-clock
  :after org
  :custom
  (org-clock-in-resume t)
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-report-include-clocking-task t)
  (org-clock-auto-clock-resolution 'when-no-clock-is-running)
  (org-clock-persist t)
  :general
  (localleader-def
    :keymap org-mode-map
    "c" '(:ignore t :wk "clock")
    "ci" 'org-clock-in
    "co" 'org-clock-out
    "cf" 'org-clock-goto
    "cq" 'org-clock-cancel
    "cc" 'org-clock-in-last)
  ;; lazy-load org-clock, as it slows down init quite a bit.
  ;; source: https://github.com/raxod502/radian
  :commands org-clock-load org-clock-save
  :init
  ;; Allow clock data to be saved persistently.
  (setq org-clock-persist t)

  ;; Actually enable clock persistence. This is taken from
  ;; `org-clock-persistence-insinuate', but we can't use that function
  ;; since it causes both `org' and `org-clock' to be loaded for no
  ;; good reason.
  (add-hook 'org-mode-hook #'org-clock-load)
  (add-hook 'kill-emacs-hook #'org-clock-save)

  :config
  (dolist (fun '(org-clock-in
                 org-clock-out
                 org-clock-in-last
                 org-clock-goto
                 org-clock-cancel))
    (advice-add fun :before #'org-clock-load)))
#+end_src

** org-projectile
#+begin_src emacs-lisp
(use-package org-projectile
  :after projectile org
  :general
  (leader-def
    "po" 'org-projectile-project-todo-completing-read
    "op" 'org-projectile-project-todo-completing-read)
  :custom
  (org-projectile-per-project-filepath "todo.org")
  ;; https://github.com/IvanMalison/org-projectile#project-headings-are-links
  (org-confirm-elisp-link-function nil)
  :config
  (org-projectile-per-project)
  (projectile-add-known-project org-directory)
  ;; avoid adding non-existing files.
  (setq org-agenda-files
        (append org-agenda-files
                (delq nil (mapcar (lambda (file) (if (file-exists-p file) file))
                                  (org-projectile-todo-files)))))
  (push (org-projectile-project-todo-entry) org-capture-templates))
#+end_src

* Languages

** Emacs Lisp
#+begin_src emacs-lisp
(use-package elisp-mode
  :straight (:type built-in)
  :hook
  (org-src-mode . (lambda () (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))))
  :general
  (localleader-def
    :keymaps 'emacs-lisp-mode-map
    :major-modes t
    "e" '(:ignore t :wk "eval")
    "ee" 'eval-defun
    "es" 'eval-last-sexp
    "eb" 'eval-buffer
    "er" 'eval-region))
#+end_src

** Git
#+begin_src emacs-lisp
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+end_src

** Nix
#+begin_src emacs-lisp
(use-package nix-mode)
(use-package nixpkgs-fmt
  :hook (nix-mode . nixpkgs-fmt-on-save-mode))
(use-package pretty-sha-path
  :hook
  (shell-mode . pretty-sha-path-mode)
  (dired-mode . pretty-sha-path-mode))
(use-package direnv
  :config (direnv-mode 1))
#+end_src

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands gfm-mode markdown-mode
  :mode
  ("README\\.md\\'" . gfm-mode)
  ("\\.md\\'" . markdown-mode)
  ("\\.markdown\\'" . markdown-mode)
  :custom
  (markdown-command '("pandoc" "--from=markdown" "--to=html5")))
#+end_src

** Clojure
#+begin_src emacs-lisp
(use-package clojure-mode)

(use-package clj-refactor
  :hook (clojure-mode . clj-refactor-mode))

(use-package cider
  :hook (clojure-mode . cider-mode))
#+end_src
