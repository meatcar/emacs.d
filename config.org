#+STARTUP: content
#+PROPERTY: header-args :results silent

* The Bestest =.emacs.d=

  Inspired by Spacemacs and Doom Emacs. Most of the "aesthetic" parts of those distributions are available as plugins, so gluing together your own configuration isn't too hard.

  Featuring:

  - [[https://github.com/raxod502/straight.el][straight.el]]
  - maximal [[https://github.com/jwiegley/use-package][use-package]]
  - maximal [[https://github.com/emacs-evil/evil][EVIL]]

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

* Startup, general Emacs settings
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq inhibit-startup-message t
      custom-safe-themes t
      create-lockfiles nil
      confirm-kill-processes nil
      backup-by-copying t
      require-final-newline t
      delete-old-versions t
      enable-local-variables :safe

      ;; Always redraw immediately when scrolling,
      ;; more responsive and doesn't hang!
      ;; http://emacs.stackexchange.com/a/31427/2418
      fast-but-imprecise-scrolling t
      jit-lock-defer-time 0)

;; Hide Scroll bar,menu bar, tool bar
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

(global-auto-revert-mode)
(save-place-mode)

(setq desktop-restore-eager 5)
(desktop-save-mode 1)

(setq-default indent-tabs-mode nil)
#+END_SRC

** UTF-8 by Default
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(if (eq system-type 'windows-nt)
  (set-w32-system-coding-system 'utf-8))
(set-buffer-file-coding-system 'utf-8)
#+end_src

* Packages

** No Littering
#+begin_src emacs-lisp
(use-package no-littering
  :config
  (setq
   auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file)))
#+end_src

** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :after evil
  :custom
  (which-key-show-early-on-C-h t)
  (which-key-idle-delay 0.3)
  (which-key-idle-secondary-delay 0.1)
  (which-key-allow-evil-operators t)
  (which-key-add-column-padding 1)
  (which-key-show-remaining-keys t)
  (which-key-sort-order 'which-key-prefix-then-key-order)
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold))

#+end_src

** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-Y-yank-to-eol t
        evil-split-window-below t
        evil-vsplit-window-right t)
  :config
  (evil-mode 1))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
(use-package evil-commentary
  :config
  (evil-commentary-mode))
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
(use-package evil-magit)
#+END_SRC

** [[https://github.com/noctuid/general.el][general.el]]
Keybindings
#+begin_src emacs-lisp
(use-package general
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer leader-def
    :states '(normal motion emacs)
    :keymaps 'override
    :prefix "SPC"
    :non-normal-prefix "C-SPC")
  (leader-def "" '(:ignore t :wk "leader"))
  (general-create-definer localleader-def
    :states '(normal motion emacs)
    :keymaps 'override
    :prefix "SPC m"
    :non-normal-prefix "C-SPC m")
  (localleader-def "" '(:ignore t :wk "mode")))
#+end_src

** Helpful
Better Emacs =*help*= buffer.

#+begin_src emacs-lisp
(use-package helpful
  :general
  (leader-def
    "h" '(:ignore t :wk "help")
    "hf" 'helpful-callable
    "hv" 'helpful-variable
    "hk" 'helpful-key
    "ho" 'helpful-at-point))
#+end_src

** Info-colors
Pretty Info colors
#+begin_src emacs-lisp
(use-package info-colors
  :config
  (add-hook 'Info-selection-hook 'info-colors-fontify-node))
#+end_src

** Restart-emacs
#+begin_src emacs-lisp
(use-package restart-emacs
  :general
  (leader-def
    "q" '(:ignore t :wk "exit emacs")
    "qr" 'restart-emacs))
#+end_src

** Prescient
#+begin_src emacs-lisp
(use-package prescient
  :config
  (prescient-persist-mode))
#+end_src

** Counsel, Ivy
#+begin_src emacs-lisp
(use-package ivy
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-re-builders-alist '((t . ivy--regex-plus)))
  :config
  (ivy-mode 1))
(use-package counsel
  :general
  (leader-def
    "SPC" '(counsel-M-x :wk "M-x")
    "f" '(:ignore t :wk "file")
    "ff" 'counsel-find-file
    "fr" 'counsel-buffer-or-recentf
    "b" '(:ignore t :wk "buffer")
    "bb" 'switch-to-buffer
    "bd" 'kill-this-buffer
    "bn" 'next-buffer
    "bp" 'previous-buffer
    "tc" 'counsel-load-theme)
  (:states 'normal
           "C-p"  'projectile-find-file
           "C-S-p"  'counsel-M-x)
  :config
  (counsel-mode 1))
(use-package flx)
(use-package ivy-prescient
  :after (ivy prescient)
  :config
  (ivy-prescient-mode))
(use-package ivy-rich
  :after ivy
  :config
  (ivy-rich-mode 1)
  (setq ivy-initial-inputs-alist nil))
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode t))
(use-package flycheck-posframe
  :after flycheck
  :hook (flycheck-mode . flycheck-posframe-mode)
  :config
  (flycheck-posframe-configure-pretty-defaults))
#+end_src

** Format All
#+begin_src emacs-lisp
(use-package format-all)
#+end_src

** Company
#+begin_src emacs-lisp
(use-package company
  :config
  (global-company-mode))
(use-package company-prescient
  :after company prescient
  :config
  (company-prescient-mode))
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
  :general
  (leader-def
    "g"  '(:ignore t :wk "git")
    "gs" '(magit :wk "git status")
    "gg" '(magit :wk "git status")))
(use-package magit-todos
  :after magit
  :custom
  (magit-todos-nice nil)
  :config
  (magit-todos-mode))
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :general
  (leader-def
    "fp" 'projectile-find-file-dwim
    "p" '(:ignore t :wk "project")
    "pp" 'projectile-switch-project
    "pf" 'projectile-find-file
    "pd" 'projectile-dired
    "p/" 'projectile-ripgrep)
  :custom
  (projectile-completion-system 'default)
  :config
  (projectile-mode +1))
#+end_src

** Git Gutter
#+begin_src emacs-lisp
(use-package diff-hl
  :hook
  (dired-mode . diff-hl-dired-mode-unless-remote)
  :config
  (global-diff-hl-mode))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :general
  (leader-def
    "tt" 'treemacs
    "tf" 'treemacs-find-file))
(use-package treemacs-evil
  :after treemacs evil)
(use-package treemacs-projectile
  :after treemacs projectile)
(use-package treemacs-magit
  :after treemacs-magit)
#+end_src

* Interface

** Aesthetic
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore ; no bell
      ;; better scrolling
      scroll-step 1
      scroll-conservatively 101
      scroll-preserve-screen-position 1
      mouse-wheel-scroll-amount '(1 ((shift) . 5))
      mouse-wheel-follow-mouse t
      scroll-margin 3

      truncate-lines nil
      frame-resize-pixelwise t)

(setq-default line-spacing 1)

(global-hl-line-mode t)
** Fonts
#+begin_src emacs-lisp
(use-package persistent-soft)
(use-package unicode-fonts
  :after persistent-soft
  :config
  (if (eq system-type 'windows-nt)
    (custom-set-faces
       '(default ((t (:family "GoMono NF" :height 90))))
       '(variable-pitch ((t (:family "Georgia" :height 110)))))
    (custom-set-faces
     '(default ((t (:family "Go Mono" :height 90))))
     '(variable-pitch ((t (:family "IBM Plex Serif" :height 100)))))))
#+end_src

** Fast Scroll
#+begin_src emacs-lisp
(use-package fast-scroll
  :hook
  (fast-scroll-start . (lambda () (flycheck-mode -1)))
  (fast-scroll-end . (lambda () (flycheck-mode 1)))
  :config
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+end_src

** Themes
We will load all the themes
#+begin_src emacs-lisp
(use-package base16-theme)

(use-package leuven-theme)

(use-package vivid-theme
  :straight (:host github :repo "websymphony/vivid-theme"))

(use-package dracula-theme
  :after doom-themes kaolin-themes
  :config
  (load-theme 'dracula t))
#+end_src

** Mode Line
#+begin_src emacs-lisp
(use-package anzu
  :after isearch
  :config
  (global-anzu-mode))

(use-package doom-modeline
  :after anzu
  :config
  (doom-modeline-mode))
#+end_src

** All The Icons
#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
(use-package treemacs-all-the-icons
  :after treemacs
  :config
  (treemacs-load-theme "all-the-icons"))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :after all-the-icons
  :after projectile
  :custom
  (dashboard-startup-banner 'logo)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-items '((recents  . 10)
                     (projects . 5)
                     (bookmarks . 5)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :after all-the-icons
  :general
  (:states 'normal
           "gt"  'centaur-tabs-forward
           "gT"  'centaur-tabs-backward)
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (helpful-mode . centaur-tabs-local-mode)
  :custom
  (centaur-tabs-style "bar")
  (centaur-tabs-set-icons t)
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-height 32)
  (x-underline-at-descent-line t)
  (uniquify-separator "/")
  (uniquify-buffer-name-style 'forward)
  (centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-modified-marker "")
  :config
  (centaur-tabs-headline-match)
  (centaur-tabs-enable-buffer-reordering)
  (centaur-tabs-mode t)

  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

 Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
 All buffer name start with * will group to \"Emacs\".
 Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; "Remote")
      ((or (string-equal "*" (substring (buffer-name) 0 1))
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode)))
       "Emacs")
      ((derived-mode-p 'dired-mode)
       "Dired")
      ((memq major-mode '(helpful-mode
                          help-mode))
       "Help")
      ((memq major-mode '(org-agenda-clockreport-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-src-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       "OrgMode")
      (t
       (or (concat "Project: " (projectile-project-name)) (centaur-tabs-get-group-name (current-buffer))))))))
#+end_src

** Wrap Long Lines
#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook (org-src . visual-fill-column-mode)
  :config
  (setq split-window-preferred-function
        'visual-fill-column-split-window-sensibly)
  (advice-add 'text-scale-adjust
              :after #'visual-fill-column-adjust)
  (global-visual-fill-column-mode)
  (global-visual-line-mode))

#+end_src

** Mixed Pitch Mode
#+begin_src emacs-lisp
(use-package mixed-pitch
  :after all-the-icons
  :custom
  (mixed-pitch-set-height t)
  :hook (text-mode . mixed-pitch-mode))
#+end_src

* Text Editing

** Better Defaults
#+begin_src emacs-lisp
(setq fill-column 80
      sentence-end-double-space nil)
#+end_src

** Cleanup Trailing Whitespace
#+begin_src emacs-lisp
(use-package whitespace-cleanup-mode
  :custom
  (show-trailing-whitespace t)
  :config
  (global-whitespace-cleanup-mode))
#+end_src

** Paren
#+begin_src emacs-lisp
(use-package paren
  :straight (:type built-in)
  :custom
  (show-paren-when-point-inside-paren t)
  :config
  (show-paren-mode))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (progn-mode . rainbow-delimiters-mode)
  :config
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground "red"
                      :inherit 'error
                      :box t))
#+end_src

** Parinfer
#+begin_src emacs-lisp
(use-package parinfer
  :hook ((emacs-lisp-mode . parinfer-mode)
         (lisp-mode . parinfer-mode)
         (clojure-mode . parinfer-mode))
  :init
  (setq parinfer-extensions '(defaults pretty-parens evil)))
#+end_src

* Org Mode

** org
#+begin_src emacs-lisp
(use-package org
  :after org-superstar
  :general
  (leader-def
    "o" '(:ignore t :wk "org")
    "oa" 'org-agenda)
  (localleader-def
    :keymaps 'org-mode-map
    :major-modes t
    "," '(org-insert-structure-template :wk "insert block")
    "e" '(:ignore t :wk "execute")
    "ee" '(org-babel-execute-maybe :wk "execute (dwim)")
    "es" '(org-babel-execute-src-block :wk "execute block")
    "eb" '(org-babel-execute-buffer :wk "execute buffer")
    "et" '(org-babel-execute-subtree :wk "execute subtree")
    "'"  '(org-edit-special :wk "edit block")
    "tt" 'counsel-org-tag
    "tv" 'org-change-tag-in-region)
  (:keymaps 'org-src-mode
            :definer 'minor-mode
            :states 'normal
            "RET"  '(org-edit-src-exit :wk "save")
            "q"  '(org-edit-src-abort :wk "abort"))
  :custom
  (org-directory "~/Sync/org")
  (org-src-fontify-natively t)
  (org-src-window-setup 'current-window)
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-startup-truncated nil)
  (org-catch-invisible-edits 'show-and-error)
  (org-confirm-babel-evaluate nil)
  (org-hide-emphasis-markers nil)
  (org-pretty-entities t)
  (org-fontify-quote-and-verse-blocks t)
  (org-cycle-separator-lines -1)
  (org-ellipsis "...")
  (org-tag-column 0)
  :hook (org-mode . org-indent-mode)
  :config
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("ss" . "src sh")))
#+end_src

** org-superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :after all-the-icons
  :custom
  (inhibit-compacting-font-caches t)

  (org-superstar-headline-bullets-list '("⌾" "◈" "⚬" "▷"))

  (org-hide-leading-stars nil)
  (org-superstar-leading-bullet ?\s)

  (org-superstar-special-todo-items t)

  (org-superstar-prettify-item-bullets t)
  :hook
  (org-mode . me/auto-lightweight-mode)
  :config
  (defun me/auto-lightweight-mode ()
    "Start Org Superstar differently depending on the number of lists items."
    (let ((list-items
           (count-matches "^[ \t]*?\\([+-*]\\|[ \t]\\*\\)"
                          (point-min) (point-max))))
      (unless (< list-items 100))
      (org-superstar-toggle-lightweight-lists))
    (org-superstar-mode)))
#+end_src

** org-clock
#+begin_src emacs-lisp
(use-feature org-clock
  :after org
  :init
  (setq org-clock-persist t)
  :custom
  (org-clock-in-resume t)
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-report-include-clocking-task t)
  (org-clock-auto-clock-resolution 'when-no-clock-is-running)
  :general
  (localleader-def
    :keymap org-mode-map
    "c" '(:ignore t :wk "clock")
    "ci" 'org-clock-in
    "co" 'org-clock-out
    "cf" 'org-clock-goto
    "cq" 'org-clock-cancel
    "cc" 'org-clock-in-last)
  :config
  (org-clock-load)
  (org-clock-persistence-insinuate))

;; TODO: see raxod502/radian for how to lazy-load clock
#+end_src

** org-projectile
#+begin_src emacs-lisp
(use-package org-projectile
  :after projectile org
  :general
  (leader-def
    "po" 'org-projectile-project-todo-completing-read
    "op" 'org-projectile-project-todo-completing-read)
  :custom
  (org-projectile-per-project-filepath "todo.org")
  ;; https://github.com/IvanMalison/org-projectile#project-headings-are-links
  (org-confirm-elisp-link-function nil)
  :config
  (org-projectile-per-project)
  ;; avoid adding non-existing files.
  (setq org-agenda-files
        (append org-agenda-files
                (delq nil (mapcar (lambda (file) (if (file-exists-p file) file))
                                  (org-projectile-todo-files)))))
  (push (org-projectile-project-todo-entry) org-capture-templates))
#+end_src

* Languages

** Emacs Lisp
#+begin_src emacs-lisp
(use-package elisp-mode
  :straight (:type built-in)
  :general
  (localleader-def
    :keymaps 'emacs-lisp-mode-map
    :major-modes t
    "e" '(:ignore t :wk "eval")
    "ee" 'eval-defun
    "es" 'eval-last-sexp
    "eb" 'eval-buffer
    "er" 'eval-region))
#+end_src

** Git
#+begin_src emacs-lisp
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+end_src

** Nix
#+begin_src emacs-lisp
(use-package nix-mode)
(use-package nixpkgs-fmt
  :hook (nix-mode . nixpkgs-fmt-on-save-mode))
(use-package pretty-sha-path
  :hook
  (shell-mode . pretty-sha-path-mode)
  (dired-mode . pretty-sha-path-mode))
   #+end_src
